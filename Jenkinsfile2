pipeline {

	agent any

	environment {

		mvnpath = '/opt/maven/bin'
	}
	stages {
		stage ("Checkout the code") {

			steps {
				checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/saiboby/sampleapp.git']]])
			}
 	
		}

		stage ("Build phase") {

			steps {

			sh "$mvnpath/mvn clean package -Dmaven.test.skip=true"
		}

		}

		stage ("Sonar Quality Analysis") {

			steps {

				withSonarQubeEnv('sonarqube-9') {
					sh '''
						$mvnpath/mvn clean verify sonar:sonar \
							-Dmaven.test.skip=true \
  							-Dsonar.projectKey=myapp \
  							-Dsonar.host.url=http://192.168.10.30:9000 \
  							-Dsonar.login=857f54c1e444eac7bdc5fac77553882a2efa7278
					'''
			}			
		}
	}

	   stage("Quality Gate") {
            steps {
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
              }
            }
          }

}

}	







"""
import groovy.json.JsonSlurperClassic

pipeline {
....
stage('Check Sonar') {
            steps {
                withMaven(maven: 'maven-3.3.9') {
                    withSonarQubeEnv('SonarQube') {
                        sh 'mvn clean install sonar:sonar -Dsonar.scm.disabled=true -Dsonar.host.url=$SONAR_HOST_URL'
                    }
                }
                timeout(1) {
                    waitUntil {
                        script {
                            fileExists('target/sonar/report-task.txt')
                        }
                    }
                    waitUntil {
                        script {
                            def taskId = readFile('target/sonar/report-task.txt').split("\n")[3].split("=")[1]
                            def task_response = httpRequest "https://sonarUrl.com/api/ce/task?id=${taskId}"
                            def task_data = new JsonSlurperClassic().parseText(task_response.content)
                            return (task_data.task.status.equals("SUCCESS"))
                        }
                    }
                }
                script {
                    def response = httpRequest "https://sonarUrl.com/api/qualitygates/project_status?projectKey=XXX"
                    def data = new JsonSlurperClassic().parseText(response.content)
                    if (data.projectStatus.status == "ERROR") {
                        error("Sonar Quality Gate not met. Check https://sonarUrl.com/overview?id=XXX")
                    }
                }
            }
        }
"""
